/*
    FingerJetFX OSE -- Fingerprint Feature Extractor, Open Source Edition

    Copyright (c) 2011 by DigitalPersona, Inc. All rights reserved.

    DigitalPersona, FingerJet, and FingerJetFX are registered trademarks 
    or trademarks of DigitalPersona, Inc. in the United States and other
    countries.

    FingerJetFX OSE is open source software that you may modify and/or
    redistribute under the terms of the GNU Lesser General Public License
    as published by the Free Software Foundation, either version 3 of the 
    License, or (at your option) any later version, provided that the 
    conditions specified in the COPYRIGHT.txt file provided with this 
    software are met.
 
    For more information, please visit digitalpersona.com/fingerjetfx.
*/ 
/*
      BINARY: testFRFXLLInternals - Unit Tests for Fingerprint Feature Extractor Internals
      
      ALGORITHM:      Alexander Ivanisov
                      Yi Chen
                      Salil Prabhakar
      IMPLEMENTATION: Alexander Ivanisov
                      Jacob Kaminsky
                      Lixin Wei
      DATE:           11/08/2011
*/

#ifndef __TestAssignment_h
#define __TestAssignment_h
#define YX_TAIL 1 //1 ARRAY //2 BITSET //3 LOOKUP //
#include "assignment.h"

namespace {
  template <class T, class pair_t, uint8 m>
  inline void add(T & a, pair_t (& pairs)[m]) {
    for (size_t i = 0; i < m; i++) {
      a.add(pairs[i]);
    }
  }
  template <class pair_t>
  inline uint8 count(pair_t * cur) {
    uint8 cnt = 0;
    for (; cur; cur = cur->next) {
      cnt++;
    }
    return cnt;
  }
  using namespace FingerJetFxOSE;
  class TestAssignment1to1 : public CxxTest::TestSuite {
    struct pair_t {
      pair_t * next;
      uint8 left;
      uint8 right;

      pair_t(uint8 l, uint8 r) 
        : left(l), right(r) {}
    };

  public:
    //virtual void setUp() {
    //}

    void testCountCase1() {
      pair_t pairs[] = {
        pair_t(5, 0),
        pair_t(0, 1),
        pair_t(3, 2),
        pair_t(1, 1),
      };
      assignment_1_to_1<pair_t, 76> a;
      add(a, pairs);
      TS_ASSERT_EQUALS(2, count(a.collect()));
      TS_ASSERT_EQUALS(2, a.count);
    }
    void testCountCase2() {
      pair_t pairs[] = {
        pair_t(5, 0),
        pair_t(0, 1),
        pair_t(3, 2),
        pair_t(1, 3),
      };
      assignment_1_to_1<pair_t, 76> a;
      add(a, pairs);
      TS_ASSERT_EQUALS(4, count(a.collect()));
      TS_ASSERT_EQUALS(4, a.count);
    }
    void testCountCase3() {
      pair_t pairs[] = {
        pair_t(5, 0),
        pair_t(0, 1),
        pair_t(3, 2),
        pair_t(1, 3),
        pair_t(2, 3),
      };
      assignment_1_to_1<pair_t, 76> a;
      add(a, pairs);
      TS_ASSERT_EQUALS(3, count(a.collect()));
      TS_ASSERT_EQUALS(3, a.count);
    }
    void testCountCase4() {
      pair_t pairs[] = {
        pair_t(5, 0),
        pair_t(0, 1),
        pair_t(3, 2),
        pair_t(1, 3),
        pair_t(0, 3),
      };
      assignment_1_to_1<pair_t, 76> a;
      add(a, pairs);
      TS_ASSERT_EQUALS(2, count(a.collect()));
      TS_ASSERT_EQUALS(2, a.count);
    }
    void testCountCase5() {
      pair_t pairs[] = {
        pair_t(5, 0),
        pair_t(0, 1),
        pair_t(3, 2),
        pair_t(1, 3),
        pair_t(4, 4),
      };
      assignment_1_to_1<pair_t, 76> a;
      add(a, pairs);
      TS_ASSERT_EQUALS(5, count(a.collect()));
      TS_ASSERT_EQUALS(5, a.count);
    }
  };
  class TestAssignmentCount : public CxxTest::TestSuite {
    struct pair_t {
      pair_t * next_left;
      pair_t * next_right;
      pair_t * next;
      pair_t * prev;
      uint8 left;
      uint8 right;

      pair_t(uint8 l, uint8 r) 
        : left(l), right(r) {}
    };

  public:
    //virtual void setUp() {
    //}

    void testCountCase1() {
      pair_t pairs[] = {
        pair_t(0, 0),
        pair_t(0, 1),
        pair_t(1, 0),
        pair_t(1, 1),
      };
      assignment_counter<pair_t, 76> a;
      add(a, pairs);
      TS_ASSERT_EQUALS(2, a.count());
    }
    void testCountCase2() {
      pair_t pairs[] = {
        pair_t(0, 0),
        pair_t(0, 1),
        pair_t(1, 0),
      };
      assignment_counter<pair_t, 76> a;
      add(a, pairs);
      TS_ASSERT_EQUALS(2, a.count());
    }
    void testCountCase3() {
      pair_t pairs[] = {
        pair_t(0, 0),
        pair_t(0, 1),
      };
      assignment_counter<pair_t, 76> a;
      add(a, pairs);
      TS_ASSERT_EQUALS(1, a.count());
    }
    void testCountCase4() {
      pair_t pairs[] = {
        pair_t(5, 4),
        pair_t(5, 1),
        pair_t(5, 2),
        pair_t(3, 5),
        pair_t(4, 5),
        pair_t(2, 5),
      };
      assignment_counter<pair_t, 76> a;
      add(a, pairs);
      TS_ASSERT_EQUALS(2, a.count());
    }
    void testCountCase5() {
      pair_t pairs[] = {
        pair_t(5, 4),
        pair_t(5, 1),
        pair_t(5, 2),
        pair_t(3, 5),
        pair_t(4, 5),
        pair_t(2, 5),
        pair_t(2, 1),
      };
      assignment_counter<pair_t, 76> a;
      add(a, pairs);
      TS_ASSERT_EQUALS(3, a.count());
    }
    void testCountCase6() {
      pair_t pairs[] = {
        pair_t(0, 1),
        pair_t(0, 2),
        pair_t(0, 3),
        pair_t(1, 1),
        pair_t(1, 2),
        pair_t(1, 3),
        pair_t(2, 4),
        pair_t(3, 4),
        pair_t(4, 4),
        pair_t(2, 5),
        pair_t(3, 5),
        pair_t(4, 5),
      };
      assignment_counter<pair_t, 76> a;
      add(a, pairs);
      TS_ASSERT_EQUALS(4, a.count());
    }
    void testCountCase7() {
      pair_t pairs[] = {
        pair_t(0, 1),
        pair_t(0, 2),
        pair_t(0, 3),
        pair_t(0, 6),
        pair_t(1, 1),
        pair_t(1, 2),
        pair_t(1, 3),
        pair_t(1, 6),
        pair_t(2, 4),
        pair_t(3, 4),
        pair_t(4, 4),
        pair_t(5, 4),
        pair_t(2, 5),
        pair_t(3, 5),
        pair_t(4, 5),
        pair_t(5, 5),
      };
      assignment_counter<pair_t, 76> a;
      add(a, pairs);
      TS_ASSERT_EQUALS(4, a.count());
    }
    void testCountCase8() {
      pair_t pairs[] = {
        pair_t(0, 1),
        pair_t(0, 2),
        pair_t(0, 3),
        pair_t(1, 1),
        pair_t(1, 2),
        pair_t(1, 3),
        pair_t(2, 1),
        pair_t(2, 2),
        pair_t(2, 3),
      };
      assignment_counter<pair_t, 76> a;
      add(a, pairs);
      TS_ASSERT_EQUALS(3, a.count());
    }
    void testCountCase9() {
      pair_t pairs[] = {
        //pair_t(0, 1),
        pair_t(0, 2),
        pair_t(0, 3),
        pair_t(1, 1),
        //pair_t(1, 2),
        pair_t(1, 3),
        pair_t(2, 1),
        pair_t(2, 2),
        //pair_t(2, 3),
      };
      assignment_counter<pair_t, 76> a;
      add(a, pairs);
      TS_ASSERT_EQUALS(3, a.count());
    }
    void testCountCase10() {
      pair_t pairs[] = {
        pair_t(0, 1),
        pair_t(0, 2),
        pair_t(0, 3),
        pair_t(1, 1),
        //pair_t(1, 2),
        pair_t(1, 3),
        pair_t(2, 1),
        pair_t(2, 2),
        pair_t(2, 3),
      };
      assignment_counter<pair_t, 76> a;
      add(a, pairs);
      TS_ASSERT_EQUALS(3, a.count());
    }
  };

  class TestIntegerLimits : public CxxTest::TestSuite {
  typedef unsigned long long uint64;
  public:
    void testUint32() {
      uint32 uint32_min = integer_limits<uint32>::min;
      uint32 uint32_max = integer_limits<uint32>::max;
      TS_ASSERT_EQUALS(uint32_min, 0u);
      TS_ASSERT_EQUALS(uint32_max, 0xffffffff);
    }
    void testIint32() {
      int32 int32_min = integer_limits<int32>::min;
      int32 int32_max = integer_limits<int32>::max;
      TS_ASSERT_EQUALS(int32_min, (int32)0x80000000);
      TS_ASSERT_EQUALS(int32_max, 0x7fffffff);
    }
    void testUint16() {
      uint16 uint16_min = integer_limits<uint16>::min;
      uint16 uint16_max = integer_limits<uint16>::max;
      TS_ASSERT_EQUALS(uint16_min, (uint16)0u);
      TS_ASSERT_EQUALS(uint16_max, (uint16)0xffff);
    }
    void testIint16() {
      int16 int16_min = integer_limits<int16>::min;
      int16 int16_max = integer_limits<int16>::max;
      TS_ASSERT_EQUALS(int16_min, (int16)0x8000);
      TS_ASSERT_EQUALS(int16_max, (int16)0x7fff);
    }
    void testUint8() {
      uint8 uint8_min = integer_limits<uint8>::min;
      uint8 uint8_max = integer_limits<uint8>::max;
      TS_ASSERT_EQUALS(uint8_min, (uint8)0u);
      TS_ASSERT_EQUALS(uint8_max, (uint8)0xffu);
    }
    void testIint8() {
      int8 int8_min = integer_limits<int8>::min;
      int8 int8_max = integer_limits<int8>::max;
      TS_ASSERT_EQUALS(int8_min, (int8)0x80);
      TS_ASSERT_EQUALS(int8_max, (int8)0x7f);
    }
    void testUint64() {
      uint64 uint64_min = integer_limits<uint64>::min;
      uint64 uint64_max = integer_limits<uint64>::max;
      TS_ASSERT_EQUALS(uint64_min, 0ULL);
      TS_ASSERT_EQUALS(uint64_max, 0xffffffffffffffffULL);
    }
    void testIint64() {
      int64 int64_min = integer_limits<int64>::min;
      int64 int64_max = integer_limits<int64>::max;
      TS_ASSERT_EQUALS(int64_min, (int64)0x8000000000000000LL);
      TS_ASSERT_EQUALS(int64_max, 0x7fffffffffffffffLL);
    }
    void testBool() {
      int bool_min = integer_limits<bool>::min;
      int bool_max = integer_limits<bool>::max;
      TS_ASSERT_EQUALS(bool_min, 0);
      TS_ASSERT_EQUALS(bool_max, 1);
    }
  };
  class TestLinearAssignment : public CxxTest::TestSuite {
  private:
    template <class Ty_, size_t M, size_t N>
    inline void TransposeMatrix(Ty_ (&scores)[M][N], int m, int n) {
      for (int i = 0; i < m; i++) {
        for (int j = i+1; j < n; j++) {
          std::swap(scores[i][j], scores[j][i]);
        }
      }
    }

  public:
    void testSqareMatrix2() {
      static const size_t M = 5;
      static const size_t N = 5;

      int16 scores[M][N] = {
        {7, 4},
        {3, 1},
      };
      uint8 assignment1[M], assignment2[N];
      int16 votes = linear_assignment(scores, 2, 2, assignment1, assignment2);
      TS_ASSERT_EQUALS(votes, 8);
    }
    void testSqareMatrix3() {
      static const size_t M = 5;
      static const size_t N = 5;

      int16 scores[M][N] = {
        {7, 4, 3},
        {3, 1, 2},
        {3, 0, 0}
      };
      uint8 assignment1[M], assignment2[N];
      int16 votes = linear_assignment(scores, 3, 3, assignment1, assignment2);
      TS_ASSERT_EQUALS(votes, 9);
    }
    void testZeroSizeMatrix() {
      static const size_t M = 5;
      static const size_t N = 5;
      int16 scores[M][N] = {
      };
      uint8 assignment1[M], assignment2[N];
      int16 votes = linear_assignment(scores, 0, 0, assignment1, assignment2);
      TS_ASSERT_EQUALS(votes, 0);
    }
    void testZeroRawsMatrix() {
      static const size_t M = 5;
      static const size_t N = 5;
      int16 scores[M][N] = {
      };
      uint8 assignment1[M], assignment2[N];
      int16 votes = linear_assignment(scores, 0, 4, assignment1, assignment2);
      TS_ASSERT_EQUALS(votes, 0);
    }
    void testZeroColumnsMatrix() {
      static const size_t M = 5;
      static const size_t N = 5;
      int16 scores[M][N] = {
      };
      uint8 assignment1[M], assignment2[N];
      int16 votes = linear_assignment(scores, 4, 0, assignment1, assignment2);
      TS_ASSERT_EQUALS(votes, 0);
    }
    void testWideMatrix() {
      static const size_t M = 5;
      static const size_t N = 5;

      int16 scores[M][N] = {
        {7, 4, 3},
        {3, 1, 2}
      };
      uint8 assignment1[M], assignment2[N];
      int16 votes = linear_assignment(scores, 2, 3, assignment1, assignment2);
      TS_ASSERT_EQUALS(votes, 9);
    }
    void testTallMatrix() {
      static const size_t M = 3;
      static const size_t N = 2;

      int16 scores[M][N] = {
        {2, 1},
        {7, 6},
        {3, 2}
      };
      uint8 assignment1[M], assignment2[N];
      int16 votes = linear_assignment(scores, 3, 2, assignment1, assignment2);
      TS_ASSERT_EQUALS(votes, 9);
    }
    void testSqareMatrix5() {
      static const size_t M = 8;
      static const size_t N = 8;

      int16 scores[M][N] = {
        { 1, 0, 2, 3, 2},
        { 2, 3, 1, 2, 1},
        { 2, 2, 1, 1, 2},
        { 3, 1, 2, 3, 1},
        { 3, 4, 2, 1, 2}
      };
      uint8 assignment1[M], assignment2[N];
      int16 votes = linear_assignment(scores, 5, 5, assignment1, assignment2);
      TS_ASSERT_EQUALS(votes, 13);
    }
    void testSqareMatrix6() {
      static const size_t M = 8;
      static const size_t N = 8;

      int16 scores[M][N] = {
        { 4, 3, 2, 1, 5, 6},
        { 4, 7, 6, 5, 4, 3},
        { 0, 1, 7, 5, 6, 6},
        { 3, 3, 2, 7, 6, 5},
        { 7, 6, 7, 6, 7, 7},
        { 7, 4, 5, 5, 5, 7}
      };
      uint8 assignment1[M], assignment2[N];
      int16 votes = linear_assignment(scores, 6, 6, assignment1, assignment2);
      TS_ASSERT_EQUALS(votes, 41);
    }

    void testSqareMatrix6Tr() {
      static const size_t M = 8;
      static const size_t N = 8;

      int16 scores[M][N] = {
        { 7, 6, 7, 6, 7, 7},
        { 0, 1, 7, 5, 6, 6},
        { 4, 3, 2, 1, 5, 6},
        { 3, 3, 2, 7, 6, 5},
        { 4, 7, 6, 5, 4, 3},
        { 7, 4, 5, 5, 5, 7}
      };
      uint8 assignment1[M], assignment2[N];
      int16 votes = linear_assignment(scores, 6, 6, assignment1, assignment2);
      TS_ASSERT_EQUALS(votes, 41);

      TransposeMatrix(scores, 6, 6);

      uint8 assignment1Tr[M], assignment2Tr[N];
      int16 votesTr = linear_assignment(scores, 6, 6, assignment1Tr, assignment2Tr);
      TS_ASSERT_EQUALS(votesTr, 41);

      TS_ASSERT_SAME_DATA(assignment1, assignment2Tr, 6*sizeof(*assignment1));
      TS_ASSERT_SAME_DATA(assignment2, assignment1Tr, 6*sizeof(*assignment1));
    }

    void testSqareMatrix6Tr_() {
      static const size_t M = 8;
      static const size_t N = 8;

      int16 scores[M][N] = {
        { 7, 6, 7, 6, 7, 7},
        { 0, 1, 7, 5, 6, 6},
        { 4, 3, 2, 1, 5, 6},
        { 3, 3, 2, 7, 6, 5},
        { 4, 7, 6, 5, 4, 3},
        { 7, 4, 5, 5, 5, 7}
      };
      uint8 assignment1_[M], assignment2_[N];
      int16 votes_ = linear_assignment(scores, 6, 5, assignment1_, assignment2_);
      TS_ASSERT_EQUALS(votes_, 35);

      TransposeMatrix(scores, 6, 6);

      uint8 assignment1Tr_[M], assignment2Tr_[N];
      int16 votesTr_ = linear_assignment(scores, 5, 6, assignment1Tr_, assignment2Tr_);
      TS_ASSERT_EQUALS(votesTr_, 35);

      TS_ASSERT_EQUALS(votes_, votesTr_);
      TS_ASSERT_SAME_DATA(assignment1_, assignment2Tr_, 6*sizeof(*assignment1_));
      TS_ASSERT_SAME_DATA(assignment2_, assignment1Tr_, 5*sizeof(*assignment1_));

      votesTr_ = linear_assignment(scores, 4, 6, assignment1Tr_, assignment2Tr_);
      TransposeMatrix(scores, 6, 6);
      votes_ = linear_assignment(scores, 6, 4, assignment1_, assignment2_);
      TS_ASSERT_EQUALS(votes_, votesTr_);
      TS_ASSERT_SAME_DATA(assignment1_, assignment2Tr_, 6*sizeof(*assignment1_));
      TS_ASSERT_SAME_DATA(assignment2_, assignment1Tr_, 4*sizeof(*assignment1_));
    }

    void testSqareMatrix7() {
      static const size_t M = 8;
      static const size_t N = 8;

      int16 scores[M][N] = {
        { 4, 5, 9, 7, 7, 5, 8},
        { 5, 3, 7, 7, 5, 5, 3},
        { 0, 6, 2, 1, 1, 9, 0},
        { 6, 6, 3, 7, 6, 9, 1},
        { 1, 7, 1, 3, 2, 6, 9},
        { 9, 2, 8, 2, 2, 5, 4},
        { 1, 3, 6, 5, 1, 7, 4}
      };
      uint8 assignment1[M], assignment2[N];
      int16 votes = linear_assignment(scores, 7, 7, assignment1, assignment2);
      TS_ASSERT_EQUALS(votes, 53);
    }
    void testCase1() {
//Test case 1
      static const size_t M = 3;
      static const size_t N = M;
      int16 scores[M][N] = {
        {1, 6, 0},
        {0, 8, 6},
        {4, 0, 1}
      };
//Answer:
      int16 answ =  16;
      uint8 xy[] = {1, 2, 0};
      uint8 lx[] = {0, 2, 0};
      uint8 ly[] = {4, 6, 4};

      uint8 assignment1[M], assignment2[N];
      int16 votes = linear_assignment(scores, M, M, assignment1, assignment2);
      TS_ASSERT_EQUALS(votes, answ);
      TS_ASSERT_SAME_DATA(assignment1, xy, M*sizeof(*xy));
    }
    void testCase2() {
//Test case 2
      static const size_t M = 4;
      static const size_t N = M;
      int16 scores[M][N] = {
        {5,6,2,3},
        {7,8,8,6},
        {8,9,2,6},
        {0,8,6,9}
      };
//Answer:
      int16 answ =  31;
    //uint8 xy[] = {1,2,0,3};
      uint8 xy[] = {0,2,1,3};
      //uint8 lx[] = {0,1,0,0};
      //uint8 ly[] = {5,8,8,9};

      uint8 assignment1[M], assignment2[N];
      int16 votes = linear_assignment(scores, M, M, assignment1, assignment2);
      TS_ASSERT_EQUALS(votes, answ);
      TS_ASSERT_SAME_DATA(assignment1, xy, M*sizeof(*xy));
    }
    void testCase3() {
//Test case 3
      static const size_t M = 10;
      static const size_t N = M;
      int16 scores[M][N] = {
        {8,6,0,9,5,8,1,2,7,6},
        {7,4,9,3,4,2,8,4,3,0},
        {4,4,6,7,4,5,7,1,7,1},
        {1,5,9,4,7,7,2,8,9,0},
        {4,9,6,6,2,0,0,2,4,3},
        {4,1,0,1,8,4,8,5,5,5},
        {8,9,1,9,3,0,6,7,8,8},
        {9,3,9,5,1,3,5,1,6,2},
        {5,2,5,5,3,5,1,3,2,9},
        {9,2,8,2,1,3,2,0,2,2}
      };
//Answer:
      int16 answ =  84;
      uint8 xy[] = {5,6,8,7,1,4,3,2,9,0};
      uint8 lx[] = {2,1,2,1,0,0,1,0,1,0};
      uint8 ly[] = {8,7,6,8,8,8,8,7,9,7};

      uint8 assignment1[M], assignment2[N];
      int16 votes = linear_assignment(scores, M, M, assignment1, assignment2);
      TS_ASSERT_EQUALS(votes, answ);
      TS_ASSERT_SAME_DATA(assignment1, xy, M*sizeof(*xy));

      answ =  77;
      uint8 xy1[] = {5,2,6,8,1,4,3,0,9};
      votes = linear_assignment(scores, M-1, M, assignment1, assignment2);
      TS_ASSERT_EQUALS(votes, answ);
      TS_ASSERT_SAME_DATA(assignment1, xy1, (M-1)*sizeof(*xy));

      answ =  68;
      uint8 xy2[] = {3,2,6,8,1,4,9,0};
      votes = linear_assignment(scores, M-2, M, assignment1, assignment2);
      TS_ASSERT_EQUALS(votes, answ);
      TS_ASSERT_SAME_DATA(assignment1, xy2, (M-2)*sizeof(*xy));


      answ =  75;
      uint8 xy3[] = {5,6,8,7,1,4,3,2,-1,0};
      votes = linear_assignment(scores, M, M-1, assignment1, assignment2);
      TS_ASSERT_EQUALS(votes, answ);
      TS_ASSERT_SAME_DATA(assignment1, xy3, M*sizeof(*xy));

      answ =  68;
      uint8 xy4[] = {5,6,-1,7,1,4,3,2,-1,0};//05 06 FF 07 01 04 03 02 FF 00
      votes = linear_assignment(scores, M, M-2, assignment1, assignment2);
      TS_ASSERT_EQUALS(votes, answ);
      TS_ASSERT_SAME_DATA(assignment1, xy4, M*sizeof(*xy));
    }
    void testCase4() {
//Test case 4
      static const size_t M = 50;
      static const size_t N = M;
      int16 scores[M][N] = {
        {27,56,52,28,87,23,18,88,89,79,48,14,4,21,36,79,39,89,87,29,83,98,36,54,96,23,3,13,1,63,92,28,72,96,8,59,20,78,47,9,58,48,75,62,69,11,94,61,53,81},
        {90,36,79,79,42,27,54,45,40,55,60,84,36,32,81,96,44,53,75,43,62,33,91,89,47,13,52,93,74,57,74,16,93,6,95,87,33,2,32,74,57,93,10,45,77,91,42,21,44,17},
        {65,58,2,8,99,1,21,52,95,95,9,21,12,55,27,59,42,61,61,27,87,71,72,49,68,49,41,62,23,37,79,40,48,33,48,47,87,22,51,34,17,13,55,81,68,35,93,62,48,6},
        {89,35,29,61,84,98,63,77,60,86,67,92,78,15,77,26,14,16,48,66,50,18,31,58,51,99,93,96,13,41,3,55,28,32,68,64,82,31,94,95,69,13,39,47,80,68,26,94,85,26},
        {12,87,96,43,97,0,94,90,96,60,83,51,15,63,36,83,80,18,67,74,65,88,39,4,36,19,25,14,65,10,92,30,49,89,73,47,89,20,89,37,32,25,89,47,88,25,82,20,43,49},
        {46,61,90,85,17,26,4,42,92,70,52,84,0,54,25,25,1,14,97,90,52,29,67,93,28,56,18,11,76,13,12,75,74,2,60,92,80,17,34,24,39,39,9,39,93,34,16,46,1,66},
        {36,5,47,4,98,28,12,16,39,40,81,3,15,56,58,28,0,90,45,34,15,84,25,76,75,18,62,43,64,15,61,53,20,9,9,70,37,73,38,28,65,20,83,33,28,41,61,28,84,6},
        {62,51,42,88,79,17,58,41,60,75,57,22,80,29,83,89,52,72,14,90,0,79,10,83,12,38,77,73,66,13,31,81,64,73,21,95,42,31,36,55,6,45,29,86,27,12,27,79,84,41},
        {69,36,73,32,71,85,22,0,11,41,13,94,22,29,68,95,24,62,26,13,17,85,10,46,23,37,58,3,16,94,44,38,82,17,70,54,55,92,54,18,85,20,12,7,1,80,54,78,43,33},
        {91,12,70,1,59,93,39,69,96,7,64,93,45,46,62,67,52,69,12,7,87,97,79,0,57,80,32,63,10,27,96,1,40,18,55,99,12,46,68,60,53,84,5,51,83,68,70,35,37,82},
        {94,77,32,73,77,89,6,9,52,16,89,1,70,29,19,25,80,83,71,48,96,76,85,1,79,68,21,50,3,11,84,50,88,16,75,17,57,33,26,62,50,67,63,72,96,34,49,76,70,72},
        {77,66,48,14,67,80,82,89,30,37,52,14,87,40,83,15,57,40,48,35,2,50,3,17,22,51,4,71,80,74,43,57,40,44,71,59,24,5,0,6,94,52,20,82,44,55,49,1,48,97},
        {89,50,48,44,20,22,95,76,94,75,50,89,84,42,85,7,53,9,64,54,67,59,58,40,93,3,95,42,56,43,39,45,46,39,41,18,62,37,94,8,64,96,49,1,90,35,60,43,96,25},
        {97,64,84,8,4,77,11,51,71,19,95,62,65,41,2,6,59,64,95,5,24,12,1,73,13,91,8,73,34,57,50,84,73,34,44,77,63,55,28,86,26,75,49,91,68,51,50,27,67,97},
        {84,91,9,85,64,74,28,25,0,15,34,50,99,7,37,95,36,52,50,16,39,76,92,88,20,60,91,22,40,58,71,24,49,33,62,65,7,42,90,59,57,24,62,8,83,99,3,19,3,5},
        {36,94,34,80,34,54,40,25,28,32,83,51,9,84,84,23,50,44,65,92,3,23,69,65,31,52,16,35,72,20,40,8,66,74,40,1,80,32,26,60,65,62,12,26,98,48,49,48,92,14},
        {93,96,37,62,13,21,14,30,56,86,2,48,46,68,75,86,69,7,19,48,68,36,62,32,62,60,80,11,61,73,77,6,21,15,68,34,88,82,16,44,21,18,44,19,87,71,58,8,79,77},
        {8,99,65,22,83,27,35,15,90,48,88,67,54,61,34,22,96,22,56,12,18,77,83,15,97,22,86,7,82,17,84,91,16,1,65,51,80,0,67,70,48,7,89,2,69,24,76,17,98,33},
        {81,69,62,64,84,11,38,70,18,21,40,54,64,56,55,29,8,35,30,27,57,30,34,99,33,3,75,9,72,73,42,54,42,5,70,26,16,9,49,35,30,89,89,94,97,97,75,57,84,5},
        {84,42,36,19,41,21,74,16,30,47,41,25,53,36,82,23,14,50,32,63,37,62,4,79,8,2,76,36,11,60,93,48,54,81,19,47,2,93,15,85,92,57,62,45,93,44,69,7,46,53},
        {23,84,16,27,15,76,81,91,12,45,3,6,93,10,87,12,57,42,57,73,27,2,82,41,47,75,37,68,34,83,22,57,19,90,37,34,18,70,77,31,15,81,89,60,91,28,24,0,22,82},
        {73,1,84,55,42,83,82,79,52,69,63,26,78,34,16,67,69,34,38,46,17,5,79,58,18,70,87,42,23,61,76,48,63,12,4,57,96,38,37,0,7,52,26,38,86,94,5,55,28,43},
        {54,98,1,33,56,19,56,95,61,79,57,90,27,20,2,83,77,50,22,66,50,81,18,28,19,57,74,25,64,3,20,18,1,21,52,57,92,8,53,6,39,62,96,66,82,98,50,11,49,24},
        {30,51,57,48,32,29,57,6,54,22,61,26,40,62,0,44,72,92,4,77,50,43,39,46,10,73,45,12,36,46,36,66,97,45,67,81,74,24,88,80,98,49,7,91,64,59,35,88,3,40},
        {65,54,35,56,0,45,81,97,9,17,43,45,36,93,91,3,74,17,79,14,98,78,64,5,21,80,16,56,68,19,48,33,73,84,41,26,81,22,23,91,91,19,88,27,64,31,82,38,49,62},
        {5,47,92,69,4,13,49,20,21,17,39,70,2,65,6,43,43,87,17,18,30,8,37,19,88,1,50,70,92,99,84,97,98,76,18,2,41,67,22,63,36,14,85,90,31,43,85,74,30,2},
        {92,13,62,30,32,50,83,82,73,27,34,57,24,32,86,42,87,27,61,9,42,49,75,79,91,6,22,76,32,5,30,25,18,93,7,50,95,42,84,68,70,70,26,46,55,64,89,42,43,2},
        {3,38,4,31,17,95,37,92,24,70,97,54,47,67,47,6,17,95,48,53,63,18,76,41,65,31,5,6,25,49,60,80,87,16,11,56,12,49,48,36,71,97,42,70,64,42,76,33,37,76},
        {87,0,95,15,94,12,98,99,70,23,0,82,3,39,99,15,96,63,16,96,51,39,94,93,61,58,87,37,92,24,13,31,77,60,46,71,24,44,22,46,19,23,29,22,14,80,89,10,43,57},
        {59,46,48,53,91,9,11,79,98,55,3,12,86,80,24,32,3,1,28,26,47,47,1,28,22,67,8,63,78,3,21,89,1,21,42,93,31,5,72,29,61,27,93,47,60,70,32,63,71,12},
        {41,70,60,94,99,34,62,59,97,92,15,70,81,68,44,23,61,75,28,33,56,89,13,2,89,73,72,73,36,95,85,30,65,97,24,16,31,38,28,81,30,95,3,11,63,47,86,25,22,15},
        {10,31,56,23,33,97,48,5,70,37,0,56,67,17,53,43,86,37,82,14,18,12,61,73,24,24,21,62,1,43,77,12,26,86,87,59,83,36,64,6,73,16,14,92,86,19,35,72,56,17},
        {38,26,30,99,0,6,23,21,68,25,16,98,89,43,36,28,54,71,64,19,77,89,87,91,33,73,63,69,97,19,86,35,98,68,34,50,26,58,71,47,35,39,97,76,34,85,4,89,56,21},
        {60,86,10,99,29,44,25,92,65,22,12,3,58,62,72,92,12,50,2,35,49,89,74,46,65,61,31,70,2,40,91,62,26,53,13,55,49,38,48,14,61,12,70,19,74,94,63,38,44,18},
        {73,46,7,99,92,25,12,76,95,14,68,38,28,94,91,42,1,93,80,49,59,41,13,29,12,39,23,28,77,20,46,2,66,5,2,10,30,14,86,25,81,6,15,9,0,7,51,2,52,32},
        {3,11,25,17,41,38,8,16,18,38,36,64,40,54,21,94,65,52,61,3,29,42,10,45,51,10,4,3,64,56,87,68,67,12,37,60,2,97,77,20,35,65,36,28,20,58,22,85,62,83},
        {40,91,77,50,36,81,13,92,36,77,48,23,97,68,87,86,28,42,84,57,14,71,75,3,99,95,61,22,32,75,57,24,66,87,75,55,68,88,47,4,17,48,79,15,16,66,53,44,60,37},
        {54,75,9,29,78,60,76,91,34,60,66,92,84,84,31,11,91,99,51,39,55,69,39,34,36,55,52,89,51,13,27,5,40,88,86,70,0,14,61,35,26,79,79,11,15,10,74,7,61,26},
        {98,16,95,37,2,31,92,54,72,95,19,99,1,59,39,39,81,40,54,94,27,80,73,6,43,41,16,18,48,77,96,46,45,91,35,47,74,79,53,46,74,73,98,27,84,89,67,66,81,21},
        {60,8,53,86,14,49,27,30,67,75,59,15,73,56,6,60,3,32,39,9,78,13,82,28,41,66,18,60,84,99,33,97,8,86,83,74,87,10,57,6,37,68,21,62,25,27,22,80,11,13},
        {89,90,26,71,70,19,90,88,31,26,40,64,23,0,3,6,74,90,68,31,97,57,52,18,19,77,98,93,57,9,6,47,51,85,70,22,56,12,62,88,39,2,52,62,54,7,21,29,98,41},
        {12,47,99,64,17,70,93,15,16,51,77,22,50,80,59,72,2,16,85,17,56,76,19,60,90,74,68,11,55,18,5,19,65,4,36,82,26,29,50,42,32,27,17,34,7,76,7,62,44,44},
        {79,0,20,50,61,62,76,81,74,83,99,31,3,64,87,91,98,13,20,48,8,5,27,25,39,87,53,46,1,98,42,80,50,14,82,63,77,11,44,3,94,43,34,49,59,21,40,58,86,13},
        {6,94,18,86,71,9,73,77,8,74,27,50,6,77,65,40,41,42,51,37,45,98,81,31,99,40,52,92,50,90,5,9,37,75,95,60,36,20,37,44,94,64,47,52,94,64,92,87,58,44},
        {24,55,42,57,86,93,50,90,85,0,80,90,9,69,17,56,30,54,76,67,50,70,32,97,22,78,61,15,65,19,11,89,26,5,99,12,98,49,2,84,49,35,26,11,4,44,67,86,50,44},
        {54,0,14,38,50,89,16,63,56,33,35,67,74,61,24,73,74,22,22,28,58,72,15,85,83,72,81,2,58,31,46,64,83,13,2,85,2,70,49,10,3,84,29,78,97,53,51,23,27,74},
        {52,38,98,19,23,33,43,56,35,2,39,34,66,22,47,21,60,1,43,9,11,47,45,40,77,42,45,28,66,24,54,70,62,4,41,37,89,85,93,77,39,32,11,57,7,58,78,67,11,74},
        {28,22,21,25,14,98,67,11,78,85,35,85,7,98,41,1,35,31,86,81,60,25,13,71,34,72,81,65,39,92,39,19,66,60,44,80,10,64,91,40,1,78,77,61,76,19,62,64,2,0},
        {45,62,25,10,85,11,83,66,76,74,10,15,46,76,27,90,56,89,6,99,82,8,77,59,21,6,30,83,22,84,83,67,98,60,29,83,71,64,1,0,39,11,15,37,87,95,27,95,84,86},
        {46,18,46,24,78,67,82,60,50,4,45,85,71,95,45,52,79,68,17,80,68,8,44,36,45,31,31,24,79,67,10,25,86,56,1,16,23,83,28,25,87,25,10,10,21,7,63,52,28,80},
      };
//Answer:
      int16 answ =  4809;
    //uint8 xy[] = {21,27,9,39,6,18,4,35,15,30,20,49,41,0,22,19,1,48,23,40,12,36,42,32,7,31,46,10,14,8,33,43,28,45,3,37,25,17,11,29,26,2,16,24,34,44,38,5,47,13};
      uint8 xy[] = {46,27,9,39,6,18,4,35,15,21,20,49,41,0,22,19,1,48,23,30,12,36,42,40,7,32,33,10,14,8,29,43,28,45,3,37,25,17,11,31,26,2,16,24,34,44,38,5,47,13};
      //uint8 lx[] = {6,6,8,12,9,5,4,5,8,2,4,4,7,7,4,5,3,6,4,4,6,7,0,2,8,4,4,1,0,5,6,3,4,7,4,9,9,6,3,0,5,5,3,0,10,7,3,0,5,6};
      //uint8 ly[] = {91,92,93,95,90,93,89,86,90,90,90,91,91,91,92,88,90,93,97,87,86,87,93,93,92,94,86,93,95,90,90,92,97,87,87,91,91,93,95,94,94,91,95,91,95,87,90,93,95,88};

      uint8 assignment1[M], assignment2[N];
      int16 votes = linear_assignment(scores, M, M, assignment1, assignment2);
      TS_ASSERT_EQUALS(votes, answ);
      TS_ASSERT_SAME_DATA(assignment1, xy, M*sizeof(*xy));

      answ =  4721;
    //uint8 xy1[] = {46,27,9,25,6,18,4,35,15,30,20,49,41,0,22,19,1,48,23,40,12,45,42,32,7,31,36,10,14,8,33,43,28,3,13,37,24,17,11,29,26,2,16,21,34,44,38,5,47};
    //uint8 xy1[] = {21,27,9,39,6,18,4,35,15,30,20,49,41,0,22,19,1,48,23,40,12,36,42,32,7,31,46,10,14,8,33,43,28,45,3,37,25,17,11,29,26,2,16,24,34,44,38,5,47};
      uint8 xy1[] = {21,27,9,39,6,18,4,35,15,30,20,49,41,0,45,19,1,48,23,40,12,36,42,32,7,31,46,10,14,8,33,43,28,3,13,37,25,17,11,29,26,2,16,24,34,44,38,5,47};
      votes = linear_assignment(scores, M-1, M, assignment1, assignment2);
      TS_ASSERT_EQUALS(votes, answ);
      TS_ASSERT_SAME_DATA(assignment1, xy1, (M-1)*sizeof(*xy));

      answ =  4715;
      uint8 xy2[] = {46,27,9,39,6,18,4,35,15,21,20,40,41,0,22,19,1,48,23,30,12,36,42,32,7,29,-1,10,14,8,33,43,28,45,3,37,25,17,11,31,26,2,16,24,34,44,38,5,47,13};
      votes = linear_assignment(scores, M, M-1, assignment1, assignment2);
      TS_ASSERT_EQUALS(votes, answ);
      //TS_ASSERT_SAME_DATA(assignment1, xy2, M*sizeof(*xy));

      answ =  1957;
      uint8 xy3[] = {-1,15,9,5,-1,18,-1,-1,-1,-1,-1,-1,6,-1,12,-1,-1, 1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 10, 14, 8, 4, -1, 11, -1, 3, -1, -1, 17, 0, -1, -1, 2, 16, -1, -1, -1, -1, 13, 19, -1};
      votes = linear_assignment(scores, M, 20, assignment1, assignment2);
      TS_ASSERT_EQUALS(votes, answ);
      //TS_ASSERT_SAME_DATA(assignment1, xy3, M*sizeof(*xy));
    }
    void testCase5() {
//Test case 5
      static const size_t M = 100;
      static const size_t N = M;
      int32 scores[M][N] = {
        {628,347,830,413,511,629,155,251,519,633,883,72,268,912,470,362,295,635,733,239,319,586,834,633,542,693,646,600,398,274,349,26,621,532,791,484,161,946,735,32,931,970,456,200,883,926,914,530,913,999,769,585,585,955,218,128,0,864,80,398,490,781,425,112,313,568,596,826,515,684,210,446,654,666,998,889,944,265,419,858,264,540,795,850,496,13,330,496,229,762,895,720,543,672,184,209,592,132,35,107},
        {816,598,906,823,264,256,712,561,873,484,771,138,24,566,340,520,931,670,369,160,784,616,880,327,640,416,536,232,549,924,692,717,874,598,892,490,206,957,51,80,441,822,570,817,740,910,690,671,932,59,832,716,27,64,395,667,481,932,899,382,208,591,451,82,541,344,572,100,301,976,532,94,798,102,911,891,12,601,562,296,12,394,12,39,811,407,706,644,691,958,26,251,901,829,685,795,173,258,247,826},
        {234,779,920,384,881,184,275,245,785,838,541,798,584,905,189,747,664,248,391,708,558,769,959,459,599,645,606,124,255,853,303,841,632,223,577,513,759,853,758,545,43,651,695,979,556,236,79,221,484,470,929,42,592,240,854,543,885,460,19,492,314,322,333,298,898,911,812,657,116,922,554,511,574,601,490,482,838,569,703,322,392,984,365,336,225,571,879,462,31,898,955,697,221,640,996,119,551,808,776,667},
        {82,683,178,8,284,21,491,122,942,194,445,334,531,162,670,108,733,901,570,116,152,877,814,373,518,810,844,421,970,972,441,404,655,971,413,940,992,904,414,287,450,859,621,981,373,644,89,458,897,12,575,49,889,741,774,407,551,618,829,873,943,270,277,598,241,690,890,586,946,305,873,397,516,846,378,242,842,820,52,740,832,979,789,721,720,564,481,623,534,310,496,477,932,126,428,525,168,670,111,115},
        {975,984,512,844,183,242,86,25,62,490,765,894,470,907,616,190,823,97,814,357,759,662,187,43,788,967,568,957,637,680,424,965,16,936,809,199,178,247,225,241,737,342,487,207,249,455,750,72,904,564,782,15,578,321,58,719,288,627,28,277,307,452,242,675,388,51,227,918,650,452,511,740,146,999,299,396,806,49,820,711,965,954,726,544,275,785,263,915,764,291,193,423,95,435,98,483,839,325,753,489},
        {129,265,581,276,616,881,24,422,930,844,485,896,799,564,440,426,701,55,342,465,698,535,888,793,322,338,628,161,16,381,3,145,998,936,773,966,817,797,741,748,994,226,996,145,142,436,571,843,843,265,660,541,152,900,334,475,239,314,988,607,47,343,104,46,280,878,364,97,27,105,197,21,684,193,166,826,981,90,22,176,355,682,717,860,583,403,687,174,69,675,781,117,371,885,163,651,115,527,100,143},
        {985,298,164,669,843,683,847,177,125,869,353,832,904,71,692,487,826,379,13,896,407,146,13,778,31,528,429,499,407,881,642,392,531,158,413,375,193,261,552,318,130,905,151,386,328,195,225,507,927,238,403,334,384,768,112,768,648,893,267,55,126,261,800,658,419,213,33,965,826,937,283,309,842,786,695,523,334,921,30,261,159,785,595,896,905,59,16,553,304,635,608,430,896,760,88,667,326,473,632,152},
        {410,916,461,605,54,157,128,388,78,510,649,589,295,596,837,552,7,853,105,663,488,65,94,384,826,534,404,152,8,36,304,418,304,118,375,359,275,503,99,705,365,101,294,12,49,132,564,57,337,669,72,826,735,166,562,913,53,318,417,61,355,721,831,659,191,207,370,466,62,470,171,780,923,818,792,972,302,357,381,991,26,454,169,113,972,732,378,25,50,795,438,757,869,270,769,60,829,139,527,243},
        {961,50,23,884,220,816,209,522,525,590,514,551,396,683,17,369,767,395,746,170,191,185,279,60,807,48,120,636,188,999,231,501,402,255,738,622,423,947,497,948,889,363,851,286,46,220,7,166,616,753,688,159,938,967,571,745,368,43,733,908,43,965,409,445,572,147,419,347,446,916,647,336,279,498,974,678,719,981,844,687,734,884,198,673,203,769,770,571,164,856,479,207,821,241,4,745,388,424,444,835},
        {340,91,523,620,941,497,650,660,478,494,699,564,730,249,589,933,18,360,857,183,216,688,742,389,929,99,486,318,523,930,505,215,21,28,187,962,877,837,975,355,683,26,271,765,276,861,51,646,573,908,181,141,596,276,530,526,375,368,196,250,650,701,465,671,81,5,985,958,194,312,665,878,691,288,643,319,149,694,965,74,954,499,215,551,775,97,429,150,465,625,752,115,678,217,138,111,574,476,421,769},
        {140,438,999,183,726,994,502,228,41,820,302,995,319,518,898,94,615,679,596,433,304,348,900,334,917,391,445,492,219,866,613,711,304,964,895,383,958,397,611,351,217,913,699,536,783,597,982,751,277,578,184,933,278,436,268,196,179,65,40,398,932,5,110,588,969,357,971,279,754,934,631,972,848,330,860,983,279,843,734,556,773,270,842,52,707,462,600,238,527,640,989,811,645,99,752,966,808,75,245,562},
        {10,876,886,210,206,99,193,486,942,928,394,67,550,588,471,609,50,71,848,930,63,837,93,708,288,845,26,96,921,272,658,283,148,897,493,707,996,38,545,290,318,291,357,869,880,181,478,282,252,326,212,316,163,306,376,803,151,403,899,424,27,910,59,175,807,552,234,803,943,779,445,261,71,802,130,951,335,609,585,588,935,798,256,451,456,984,254,959,739,506,384,766,416,443,942,575,348,528,730,291},
        {308,175,552,731,329,35,34,665,644,619,253,931,417,861,734,873,845,989,833,937,847,569,703,615,364,997,190,64,526,920,707,186,447,612,917,776,647,951,441,643,570,46,574,340,259,309,565,457,650,750,394,497,671,97,112,388,447,654,452,325,926,512,511,373,124,428,149,123,731,943,766,653,341,340,345,601,649,263,58,651,13,804,148,37,253,612,425,700,266,877,25,544,741,888,917,865,668,419,988,399},
        {714,754,405,55,447,750,8,448,13,66,100,379,222,600,416,476,213,841,176,831,70,554,376,812,442,645,29,111,416,370,862,130,124,619,538,571,370,546,372,735,965,472,466,187,72,882,663,637,75,192,821,498,98,197,662,540,194,691,3,611,61,218,93,538,837,631,461,559,530,833,647,495,657,113,34,730,348,50,719,775,242,540,273,340,89,287,232,284,979,236,247,392,806,340,282,643,324,744,555,854},
        {929,202,701,587,315,735,669,15,785,388,791,379,929,416,71,18,704,304,654,35,892,253,779,698,594,62,693,270,158,248,476,87,450,177,26,118,264,47,133,402,436,276,781,717,693,853,87,749,157,742,784,401,995,915,99,941,977,144,563,487,393,39,927,195,568,953,313,833,1,799,235,789,75,16,506,120,221,945,221,378,687,357,131,35,273,582,328,250,727,244,738,472,283,665,667,852,970,981,37,323},
        {132,272,112,207,640,970,680,862,916,901,592,955,259,724,342,884,306,23,134,385,267,224,857,550,241,525,754,564,506,791,887,638,415,352,197,56,322,229,918,238,483,510,194,742,586,888,978,893,911,112,630,178,689,488,81,282,13,835,846,871,979,86,861,394,438,410,450,760,640,720,999,123,231,545,217,169,433,195,414,345,659,45,875,700,533,956,983,898,792,181,769,123,267,982,517,705,392,320,466,384},
        {40,817,859,623,714,428,793,499,975,207,844,635,252,72,687,137,28,22,35,172,204,156,295,471,138,813,529,883,133,995,619,525,164,479,149,878,907,942,377,235,501,574,870,106,646,909,595,26,932,631,199,136,139,494,959,630,659,488,865,144,835,484,670,999,963,171,229,223,465,959,458,966,885,680,424,883,941,20,909,873,651,460,361,142,955,673,772,614,513,637,759,349,474,781,700,437,952,282,12,417},
        {593,822,735,478,502,160,713,444,180,974,669,183,435,383,325,390,56,450,356,569,439,467,270,913,248,971,703,552,605,715,321,198,890,57,28,744,569,741,540,749,715,210,284,502,593,961,892,1,411,601,570,851,420,193,116,669,164,819,573,121,887,895,319,777,304,347,521,873,440,62,622,507,624,258,10,569,219,254,570,631,855,492,834,276,685,302,297,201,122,222,322,361,117,993,490,773,692,363,646,132},
        {777,620,640,753,878,650,322,98,256,244,81,112,737,915,740,422,217,389,976,691,611,298,404,81,644,246,854,336,610,501,469,739,473,461,493,352,463,167,450,719,412,883,831,149,798,923,923,367,312,899,411,276,550,167,357,194,414,563,530,376,416,351,115,890,812,960,242,275,128,44,995,892,927,178,41,77,454,964,796,118,216,559,394,766,727,103,312,141,667,842,517,83,546,984,973,358,297,567,986,425},
        {963,333,317,242,511,710,671,317,26,468,436,594,27,830,360,106,286,672,247,953,867,116,388,413,453,714,123,750,281,461,527,597,794,196,191,658,258,863,975,284,683,763,879,62,594,591,169,232,616,768,185,483,885,573,248,690,287,723,440,921,537,319,870,331,515,61,341,773,924,669,409,607,432,640,670,378,232,191,610,848,959,795,683,196,721,283,886,360,358,678,633,895,997,855,579,864,917,920,989,193},
        {589,399,801,22,391,823,400,623,366,363,823,325,510,858,874,231,141,760,944,852,791,929,747,140,785,326,357,702,599,346,247,188,97,48,562,489,223,315,464,941,678,288,267,188,146,493,772,640,253,68,492,396,997,591,537,134,270,246,188,221,592,436,409,42,836,324,531,412,639,995,353,669,635,972,209,134,465,333,774,71,401,618,467,751,561,356,237,183,602,426,404,547,862,166,589,50,490,120,462,481},
        {467,816,502,455,788,711,589,254,397,715,325,150,685,144,253,246,501,491,782,455,917,186,2,131,704,591,181,194,63,644,27,883,812,881,338,600,945,279,206,342,994,883,492,679,380,746,277,233,237,59,688,506,598,691,637,302,634,170,849,50,166,228,933,978,110,623,931,55,902,137,749,248,373,241,279,753,339,908,986,576,320,26,434,270,69,423,572,704,594,773,754,760,2,39,739,464,662,22,871,916},
        {511,620,516,884,861,147,989,201,55,327,129,727,354,564,997,423,987,570,479,933,695,233,46,697,272,785,513,286,159,384,554,670,4,70,907,218,217,896,419,625,576,900,352,930,464,702,705,804,624,185,89,319,770,135,369,395,272,882,681,431,267,588,102,623,658,9,841,228,257,260,205,833,513,557,115,977,611,173,133,235,710,223,555,480,710,924,875,983,158,909,414,777,497,868,401,507,229,242,735,487},
        {855,940,672,368,850,788,697,461,313,183,49,23,758,604,503,468,880,731,451,38,992,866,816,841,86,217,348,316,811,436,803,18,728,827,386,578,615,436,392,280,619,441,303,377,397,807,197,277,890,649,315,882,867,483,723,953,52,423,269,864,859,424,234,588,252,621,518,219,409,262,500,380,55,803,109,452,962,306,729,204,955,397,86,174,232,161,128,285,937,397,501,796,174,735,736,426,708,607,997,117},
        {221,497,849,277,653,958,729,615,617,811,172,572,560,610,747,792,124,227,429,61,976,930,209,150,666,946,928,726,905,926,196,126,423,45,403,76,356,485,44,973,648,216,897,560,178,644,352,302,871,782,363,200,64,573,350,82,871,279,809,776,205,357,254,980,402,10,57,758,495,453,83,495,21,981,55,199,977,759,502,201,541,217,401,958,790,751,40,13,382,201,141,587,558,396,568,313,406,977,71,253},
        {782,507,100,155,488,155,354,465,914,208,666,808,426,67,766,568,171,158,582,553,360,723,493,270,471,413,583,229,390,7,834,524,514,934,679,354,89,385,819,356,594,838,164,372,257,282,292,780,792,874,334,152,950,179,775,773,592,358,3,982,365,837,858,879,772,537,233,213,922,405,569,868,595,85,240,852,719,533,633,512,759,319,16,61,498,791,835,90,150,190,424,867,27,282,99,151,819,332,717,93},
        {89,638,962,684,76,554,889,795,439,522,659,199,193,676,612,691,819,447,133,321,637,557,189,17,191,288,520,362,972,237,455,62,228,769,98,304,324,987,99,763,861,759,314,54,787,927,97,606,726,582,928,716,139,469,85,682,757,605,44,81,195,852,143,423,621,594,79,297,581,530,413,795,289,79,201,428,358,299,387,85,881,667,153,373,136,238,407,245,195,452,326,742,656,822,517,277,416,596,927,997},
        {127,692,144,768,771,346,549,130,645,936,567,878,603,72,603,91,310,11,336,857,815,14,600,471,836,469,100,252,418,27,602,545,719,746,665,843,92,214,973,89,502,892,320,105,964,923,548,626,286,884,483,101,251,435,572,87,257,673,340,675,52,294,572,772,40,237,615,485,804,940,926,306,184,246,412,148,522,312,774,808,549,609,262,800,397,834,887,6,859,579,681,264,873,253,388,266,842,3,103,646},
        {295,29,953,479,276,717,979,150,29,105,958,578,66,220,378,815,407,266,821,618,845,854,882,71,107,270,689,950,625,792,948,272,173,901,103,801,618,82,951,648,187,262,226,606,834,605,421,593,223,595,212,420,449,446,843,909,69,532,211,694,676,159,319,202,61,422,3,679,505,955,679,44,569,258,650,403,863,424,997,438,19,561,210,468,7,54,377,76,938,588,123,967,748,442,169,161,864,172,192,721},
        {479,872,118,48,130,120,804,345,544,801,783,563,362,345,384,721,399,761,150,690,702,273,657,802,715,826,963,931,350,155,5,182,379,123,582,509,243,386,854,788,539,989,703,253,687,87,975,86,201,477,128,903,750,785,57,817,963,372,748,666,527,753,848,259,228,782,768,472,169,975,260,60,316,315,314,3,403,641,442,604,118,570,859,220,708,916,37,23,288,785,689,167,891,889,778,119,672,547,943,193},
        {874,555,253,542,871,919,898,274,912,692,230,30,614,441,250,322,357,639,698,997,777,387,516,668,629,295,139,301,194,435,494,420,990,99,962,861,19,860,487,931,904,69,314,519,510,916,193,219,556,891,216,333,631,85,353,260,380,844,561,574,279,407,994,622,858,308,483,877,521,323,161,425,392,827,944,255,743,138,474,299,29,43,984,660,128,337,920,508,534,833,434,813,592,780,435,451,88,271,680,609},
        {946,193,387,690,20,331,945,764,469,772,415,851,815,752,863,943,89,136,803,975,321,237,141,914,369,928,717,457,551,749,419,497,943,806,540,963,137,837,79,959,609,847,162,776,599,25,719,40,161,874,16,483,463,157,749,832,437,466,290,989,567,709,838,510,867,378,826,356,216,257,315,177,104,829,954,703,855,673,744,368,900,112,203,363,621,952,196,58,770,486,399,338,547,238,848,766,616,26,122,184},
        {284,790,362,388,619,316,444,826,341,540,195,241,652,398,605,625,351,801,683,473,639,435,811,538,673,12,304,641,38,426,826,674,568,540,63,188,856,859,14,549,399,561,791,403,312,748,28,15,901,63,488,540,850,300,430,523,312,734,165,702,512,343,377,81,883,440,621,91,651,987,640,402,549,783,805,213,531,185,228,432,600,716,324,451,16,754,326,680,840,843,383,353,186,760,786,69,552,759,160,203},
        {746,153,605,647,936,762,860,468,299,88,252,251,805,929,54,173,35,381,854,876,224,237,581,411,997,719,832,549,478,345,104,224,498,709,872,786,823,84,606,122,173,859,725,330,140,780,503,175,513,357,403,737,594,984,500,943,55,685,492,533,382,596,110,880,657,334,666,480,418,625,954,591,484,680,273,976,812,777,151,325,134,555,414,81,891,267,24,947,952,869,832,334,817,942,566,827,276,584,307,695},
        {209,614,638,45,646,912,21,458,41,525,135,527,432,901,608,675,168,985,974,472,206,807,158,23,749,724,850,378,661,510,425,222,476,63,268,122,327,641,932,368,518,419,896,302,320,856,978,489,841,304,961,399,111,120,423,213,196,625,591,857,487,16,80,963,431,700,437,111,693,369,831,212,788,727,866,109,936,844,950,129,149,911,529,612,383,304,825,580,281,768,789,769,136,869,84,568,921,522,31,615},
        {243,862,179,32,942,45,493,878,242,443,7,391,706,888,355,442,192,533,22,474,301,811,595,790,33,679,710,306,553,741,921,797,603,452,181,545,498,26,775,740,469,783,483,527,23,838,969,568,371,343,394,25,507,989,815,540,20,525,198,574,266,120,371,221,572,904,119,422,930,894,514,399,29,997,278,53,188,600,621,911,943,15,936,450,356,103,342,376,980,541,302,598,13,25,820,937,929,939,712,859},
        {185,226,610,215,224,889,268,764,841,241,675,784,608,964,587,964,67,281,692,400,174,995,998,539,20,170,477,950,461,189,809,647,415,420,862,991,661,130,755,502,723,783,638,331,99,577,295,518,859,339,918,385,334,917,925,355,439,402,657,901,943,818,548,710,238,410,54,251,892,161,753,615,944,744,946,43,321,593,562,180,932,832,918,619,749,843,326,189,245,983,442,540,801,990,250,392,400,304,643,292},
        {466,749,259,762,493,557,806,166,502,720,347,786,552,265,405,654,460,731,195,705,66,637,597,868,627,847,612,379,504,255,23,322,356,282,84,849,191,242,16,693,962,715,479,867,332,237,873,792,968,420,849,35,409,798,255,388,645,867,767,501,122,142,823,831,776,908,680,967,150,48,12,465,115,843,684,799,80,909,943,49,681,144,436,90,942,691,478,940,558,597,441,32,739,617,863,867,525,896,834,27},
        {296,198,844,764,41,880,563,122,141,507,523,822,3,959,912,946,650,742,238,560,691,679,592,782,296,808,649,173,704,835,553,352,33,749,116,75,630,680,549,771,539,72,946,542,31,858,840,33,953,78,593,644,110,537,779,758,345,428,932,401,264,837,754,297,586,870,724,568,550,273,692,441,697,638,984,80,848,176,113,801,255,58,798,365,596,577,475,293,5,407,695,621,596,449,271,535,671,347,103,222},
        {973,795,15,670,785,351,751,634,528,216,435,135,627,585,500,575,162,975,868,520,735,563,493,683,364,764,218,36,112,322,610,437,469,625,107,255,977,210,889,857,779,676,992,406,262,844,981,776,171,849,648,906,765,142,942,481,258,160,869,722,834,479,159,304,457,619,911,786,829,800,643,608,828,635,14,442,479,347,219,650,549,219,909,314,361,851,147,972,11,17,694,198,848,206,502,305,825,413,91,6},
        {565,734,615,393,369,981,836,848,681,407,851,230,626,760,896,340,611,43,312,974,60,358,172,909,564,26,566,741,439,658,748,356,744,363,102,114,696,290,314,377,49,165,607,675,925,503,367,888,899,679,863,959,390,387,220,954,414,139,696,205,797,444,562,893,159,16,359,207,306,674,585,355,191,544,382,469,400,750,709,299,429,572,610,171,960,831,126,726,322,174,931,471,970,493,364,129,509,724,336,167},
        {750,273,522,941,818,905,762,218,655,472,517,436,396,127,608,708,310,86,434,632,260,366,455,230,211,820,711,73,544,47,240,294,321,763,587,491,20,350,709,27,174,578,815,570,57,775,279,720,861,713,704,473,431,160,55,643,980,766,716,876,166,308,522,839,423,109,330,443,811,391,822,985,321,638,556,378,413,187,450,627,252,155,100,684,667,508,679,647,274,747,875,440,55,397,279,479,506,961,274,318},
        {352,449,655,673,439,563,404,204,750,854,831,3,361,284,39,28,792,718,675,66,465,550,859,872,947,490,703,806,452,978,476,156,779,131,182,218,695,938,422,797,792,606,152,154,890,191,182,34,909,210,452,726,112,311,599,412,154,654,570,958,984,46,466,763,529,648,981,224,586,756,374,731,362,526,237,604,718,771,638,979,333,90,58,446,754,9,210,260,663,780,218,648,178,684,763,707,685,745,284,623},
        {853,658,354,567,536,943,171,254,715,161,586,48,603,644,846,709,5,408,969,668,188,539,668,718,224,432,426,261,529,62,884,382,720,591,949,256,534,472,863,249,985,801,650,588,445,496,298,802,905,619,470,445,159,139,164,383,923,942,996,452,4,880,186,76,471,487,684,358,959,547,607,944,348,609,884,145,106,534,947,363,154,770,808,313,261,324,48,184,618,44,988,622,924,174,698,748,661,383,106,972},
        {282,65,268,983,27,152,480,133,687,780,848,193,902,8,506,163,685,554,699,303,598,687,926,874,861,976,974,874,711,432,846,346,850,114,681,877,618,161,362,657,293,210,850,195,570,708,710,255,262,409,559,212,96,837,439,309,813,413,183,525,846,29,223,696,495,904,925,466,65,287,475,711,849,326,906,419,386,969,675,1,378,586,213,475,423,652,136,588,418,320,465,616,349,688,664,197,592,589,663,10},
        {876,138,721,77,816,979,496,555,948,523,556,679,109,769,506,884,774,642,473,544,962,938,160,664,979,824,861,571,413,876,933,641,366,6,718,535,986,566,442,286,90,998,317,551,119,823,436,245,466,261,789,428,551,949,444,530,125,657,454,538,885,387,531,252,394,249,139,732,168,581,370,258,931,688,161,50,511,949,296,329,210,85,110,114,387,554,996,512,212,450,403,97,190,286,701,584,888,192,668,56},
        {125,38,666,56,78,827,107,942,777,403,271,339,840,381,453,579,936,450,444,500,252,199,949,442,485,3,26,373,195,46,429,321,437,447,729,515,275,836,809,52,591,81,391,784,462,197,363,750,999,807,250,251,6,552,694,492,555,72,217,750,471,999,423,908,446,153,775,721,341,585,125,285,666,869,69,480,418,432,231,417,592,833,668,950,385,714,794,940,139,12,43,610,363,818,518,161,323,645,235,665},
        {230,360,950,248,581,371,729,999,155,312,768,747,145,789,698,531,503,844,823,642,856,866,252,571,685,122,733,360,768,968,25,350,680,327,599,262,50,680,613,206,992,382,953,137,171,3,20,26,848,844,21,56,62,273,980,747,748,713,460,516,681,485,218,361,165,817,975,215,497,589,421,841,323,727,979,494,82,351,520,282,195,541,339,258,167,319,357,267,384,817,135,65,655,353,778,172,523,106,387,372},
        {47,161,214,370,240,545,864,322,896,736,605,92,630,296,702,149,967,59,416,351,229,903,768,884,256,898,56,779,4,795,152,51,308,366,421,548,911,637,223,159,726,828,251,708,476,953,209,443,365,977,794,594,880,562,830,136,460,238,268,817,385,420,868,694,138,642,594,401,631,817,560,709,997,164,417,473,469,626,916,834,603,62,780,835,624,610,972,85,200,240,902,586,12,122,280,150,116,226,903,748},
        {44,463,809,393,979,227,867,449,205,135,283,161,198,416,996,822,26,320,259,579,560,513,165,924,988,797,426,104,23,329,204,419,145,14,813,124,593,32,573,798,167,209,311,717,625,308,540,3,628,151,582,541,17,99,465,5,896,892,461,272,573,666,43,718,680,208,195,625,240,768,423,760,977,735,477,602,395,369,606,375,873,540,268,890,640,734,247,888,978,708,512,551,374,908,622,406,116,817,31,709},
        {937,807,469,267,894,298,869,641,20,827,16,893,368,285,783,360,371,382,248,349,90,113,252,817,21,226,223,137,395,607,846,333,414,667,600,660,318,821,301,338,649,317,583,369,954,366,81,325,748,329,26,190,442,631,7,463,857,583,953,253,190,151,938,956,171,538,616,489,711,269,179,712,938,762,81,893,480,162,570,580,844,597,770,638,228,778,102,437,361,407,42,903,558,980,859,729,870,827,570,582},
        {448,749,294,386,511,728,631,343,242,202,923,438,799,694,77,379,824,531,168,537,938,211,440,848,191,651,930,414,830,500,996,278,602,642,16,465,370,648,809,965,850,732,403,1,778,480,732,954,11,900,491,301,463,283,150,7,286,80,421,468,932,417,746,534,59,115,352,782,763,161,747,965,245,150,966,376,983,50,330,346,302,174,648,766,809,150,773,96,582,546,916,514,315,15,401,726,130,753,508,893},
        {266,607,210,863,110,176,239,93,578,922,439,880,448,87,998,609,237,771,705,171,669,974,686,984,989,439,711,119,544,219,364,162,827,574,25,937,102,617,382,680,891,821,912,691,261,911,300,850,34,358,22,704,332,708,688,321,499,399,440,43,619,804,205,798,730,582,87,832,551,469,864,442,642,776,133,903,687,434,754,722,792,776,426,124,836,114,797,687,866,237,730,837,393,287,635,475,221,74,307,773},
        {895,523,215,537,299,701,793,339,487,899,413,279,27,191,755,215,657,552,902,523,141,984,360,886,271,347,361,492,773,20,265,668,543,833,558,194,886,703,885,373,602,650,652,629,841,759,196,499,663,98,374,156,82,735,42,705,434,403,549,208,775,815,228,670,0,786,864,886,489,102,259,443,752,263,424,594,374,620,445,37,70,819,193,152,906,587,857,341,342,407,901,117,574,129,787,926,916,3,164,757},
        {105,423,553,210,38,329,156,412,950,953,801,20,124,346,525,31,933,734,724,275,493,625,392,419,754,531,345,22,534,509,780,992,284,685,554,674,14,62,438,316,15,591,337,139,937,214,170,222,948,894,497,794,871,241,213,626,124,911,648,659,772,780,3,57,465,909,83,480,971,522,796,986,465,485,125,403,51,648,977,352,894,475,146,766,68,359,392,193,270,392,204,43,173,559,452,638,468,887,470,439},
        {761,619,425,227,104,902,982,508,550,959,860,445,786,6,563,855,717,307,400,340,699,604,735,872,163,187,863,631,426,685,422,188,304,847,767,761,749,749,269,652,708,129,449,847,135,12,702,204,319,454,544,18,58,279,243,573,818,458,556,245,143,978,433,800,177,200,561,278,301,830,930,361,311,379,208,798,743,910,2,62,716,547,433,774,826,28,699,645,486,255,890,981,585,675,781,114,227,342,393,880},
        {524,323,241,835,55,450,633,798,712,988,213,429,535,998,555,713,26,255,358,864,862,600,845,800,627,627,914,206,321,307,86,198,983,328,33,390,130,19,540,842,7,105,623,894,103,179,607,481,786,318,345,0,918,543,800,898,522,715,104,843,374,191,41,709,519,427,451,649,798,992,843,157,97,467,51,553,998,10,34,784,328,380,784,599,923,937,497,445,4,601,640,730,144,34,440,663,813,891,664,611},
        {235,860,120,685,327,171,238,677,181,272,813,862,4,597,461,279,886,310,724,890,911,717,621,408,751,413,71,916,656,88,527,892,948,647,929,627,170,167,304,703,791,117,565,796,66,378,75,305,688,152,195,952,221,168,360,324,581,783,240,238,223,119,482,171,118,411,150,288,578,806,343,721,275,909,517,342,639,945,999,680,449,194,632,670,715,344,994,296,127,234,886,351,353,368,874,471,131,25,111,61},
        {831,454,783,107,715,652,801,355,597,152,35,46,698,19,68,413,363,62,62,842,296,948,545,1,669,420,824,800,797,935,862,980,390,997,439,105,649,592,812,247,744,847,645,443,218,714,856,581,128,270,776,777,219,321,778,240,741,955,392,890,890,606,871,632,603,310,90,253,903,902,500,999,102,497,442,320,563,651,254,692,921,30,469,492,351,599,84,445,554,477,335,797,83,558,429,687,221,519,940,476},
        {774,792,475,876,641,270,548,205,921,802,249,194,832,70,687,536,669,771,981,576,600,668,725,684,579,154,723,800,26,663,276,800,807,751,28,448,21,576,5,294,379,254,489,563,324,528,99,346,651,432,274,252,101,999,288,680,505,11,832,883,26,108,35,185,211,63,633,585,640,991,231,371,245,720,934,922,600,386,268,252,818,894,856,271,893,144,303,750,507,135,634,885,243,669,422,807,85,407,744,77},
        {398,975,448,644,696,734,918,648,472,186,900,291,432,108,914,677,604,218,427,111,353,413,348,949,435,770,756,520,178,500,597,576,827,397,572,875,483,490,524,956,28,776,599,460,885,513,137,489,731,917,953,85,330,301,386,765,424,142,637,954,994,586,530,821,983,455,697,819,297,573,775,326,349,726,138,234,239,276,724,971,545,677,408,875,330,794,993,754,288,982,708,634,569,591,807,904,398,856,723,695},
        {429,850,373,779,576,512,13,168,140,89,139,685,766,899,912,449,45,905,203,685,888,264,319,809,207,126,713,605,983,789,652,412,991,26,543,568,890,909,736,30,998,227,67,117,478,979,566,523,237,121,208,477,737,879,286,944,5,351,901,340,140,554,105,132,932,648,52,822,909,140,204,908,367,271,25,197,250,591,720,487,64,280,964,802,159,602,746,516,954,0,209,446,906,314,578,838,314,982,660,224},
        {122,216,484,841,487,509,38,737,452,110,577,516,742,893,318,901,496,417,770,802,769,979,248,675,645,179,513,311,161,525,887,636,741,723,829,580,232,220,669,684,330,246,553,425,492,223,678,340,992,448,142,761,779,742,436,776,921,301,440,435,178,679,71,271,403,900,851,635,120,521,672,803,119,577,228,963,800,906,303,793,707,797,554,486,892,343,615,813,644,55,600,175,734,23,446,489,924,298,125,396},
        {171,149,551,290,726,131,606,878,390,909,23,97,59,578,935,951,273,550,116,269,957,69,444,44,92,243,533,16,541,10,765,64,159,668,354,237,800,960,468,190,222,491,639,633,421,574,936,694,477,404,316,786,473,760,830,566,3,716,934,896,726,699,960,238,720,667,827,520,979,295,62,553,787,701,186,560,627,474,255,456,879,571,243,352,683,425,918,39,493,853,935,572,904,248,162,624,915,989,496,894},
        {637,910,800,776,611,986,336,591,461,591,47,692,514,642,44,550,420,963,589,913,168,876,837,72,124,999,697,391,989,545,638,978,456,438,754,419,776,90,362,589,34,762,281,900,404,326,450,176,641,39,442,809,916,279,881,392,279,930,784,620,476,422,598,284,860,352,703,636,794,66,226,828,828,507,729,584,185,179,113,826,571,555,635,839,834,517,231,465,799,367,437,627,789,35,911,649,739,967,638,534},
        {385,216,362,565,75,443,501,261,975,614,87,546,169,723,737,356,592,968,173,391,336,611,371,477,646,282,479,386,601,117,272,986,333,986,903,760,430,405,21,405,19,109,303,541,184,40,897,128,360,422,871,48,33,242,526,680,877,5,418,478,474,42,817,159,28,720,919,458,477,941,215,497,402,870,390,938,910,639,66,271,61,289,319,95,532,197,127,761,202,897,591,28,939,408,187,967,481,107,778,958},
        {400,993,807,802,864,197,740,126,188,158,749,250,447,421,697,331,618,824,444,173,73,36,201,12,444,389,979,277,496,757,236,248,103,395,50,319,945,142,445,133,652,547,735,451,968,432,135,586,608,579,759,681,615,313,693,412,702,25,689,550,134,277,798,589,673,200,908,618,342,706,103,994,253,839,797,573,271,932,159,232,512,271,913,127,584,959,891,638,984,581,540,470,210,338,60,883,538,320,853,232},
        {378,957,578,983,796,375,556,419,308,68,651,820,691,917,299,627,876,191,265,212,124,805,34,334,495,94,218,33,767,423,265,145,380,843,129,528,570,685,300,878,105,303,698,796,220,998,423,448,541,40,12,665,845,47,351,340,493,921,725,260,345,342,406,725,537,535,606,108,572,906,986,678,209,37,474,782,387,250,230,928,290,595,945,136,642,296,828,135,218,906,396,915,600,154,992,138,689,598,598,613},
        {856,936,643,418,973,118,200,360,368,782,640,10,377,585,498,371,234,327,859,804,585,607,719,185,761,63,675,802,662,273,415,870,210,59,288,535,529,488,896,249,623,888,259,352,826,758,76,60,437,935,216,22,542,287,559,655,350,235,457,12,508,224,235,70,635,523,606,516,364,854,117,987,742,729,691,568,839,767,980,276,54,196,650,596,483,209,603,186,796,412,550,305,637,785,727,624,309,333,493,673},
        {539,610,12,282,339,703,202,178,823,183,806,877,731,808,826,567,370,429,753,166,194,303,823,183,89,903,807,398,236,652,423,128,263,787,410,954,842,612,485,665,147,291,895,879,452,721,446,822,502,551,340,696,854,516,231,943,419,39,693,7,691,468,135,306,255,897,261,98,862,746,115,9,389,10,240,193,83,686,367,938,237,708,986,444,576,218,739,995,609,785,354,652,253,842,959,861,739,572,959,601},
        {318,426,611,59,789,851,253,872,890,620,810,479,680,149,923,256,367,15,603,976,800,310,628,405,152,939,266,891,511,577,493,181,4,456,241,793,659,846,17,901,818,180,733,499,329,8,107,48,23,63,376,823,373,356,229,525,296,847,416,159,425,261,341,781,69,934,926,81,132,943,982,950,123,67,801,804,76,909,204,99,972,580,275,345,937,856,222,585,703,638,744,480,252,437,261,673,371,187,754,855},
        {483,89,806,958,156,607,763,232,868,967,332,192,900,959,537,837,815,111,422,870,750,518,351,354,956,964,27,679,504,782,535,987,223,693,945,379,300,60,964,521,380,648,713,280,607,603,469,774,714,243,644,816,761,347,170,69,664,550,749,168,684,636,507,907,329,804,638,981,217,602,502,597,250,568,229,209,171,50,983,237,645,980,54,758,679,576,828,343,126,929,511,810,917,370,717,246,175,356,579,392},
        {958,434,341,561,2,570,770,525,972,754,762,617,86,168,375,765,745,555,109,871,484,972,682,401,343,751,999,518,459,579,262,770,13,603,331,367,525,453,244,497,559,6,466,645,527,193,411,272,749,872,495,585,196,529,987,539,281,338,409,92,917,671,862,282,626,545,1,151,999,245,0,558,604,818,556,131,12,967,403,761,191,898,346,387,780,685,279,61,24,688,505,293,712,368,928,338,913,929,842,912},
        {175,194,823,779,13,379,910,25,698,665,138,889,915,484,628,695,522,907,108,546,948,614,191,660,982,119,350,247,49,544,160,576,739,335,355,752,714,617,129,412,282,267,653,197,103,281,245,625,541,353,523,489,967,715,149,301,186,851,549,235,396,61,811,487,396,518,239,462,135,368,226,417,987,231,967,90,512,212,716,405,917,591,894,237,658,395,890,845,247,439,80,995,852,244,482,600,762,73,414,250},
        {441,640,19,780,871,986,870,736,550,938,141,820,530,388,57,188,783,947,385,382,739,466,377,591,62,211,544,176,284,958,426,77,951,446,857,822,784,728,910,335,18,404,155,548,792,564,89,927,511,474,310,250,292,39,194,706,251,90,883,535,48,661,613,999,107,822,174,892,550,84,579,569,840,86,469,984,650,910,912,161,737,222,764,381,613,310,88,864,400,971,752,448,632,717,800,92,539,974,336,442},
        {410,915,11,603,1,832,587,651,95,499,164,832,73,280,213,687,590,653,903,342,976,655,143,961,372,943,53,264,269,389,706,31,656,69,634,657,901,574,660,348,425,176,532,851,457,98,538,399,751,793,94,728,801,237,689,525,532,94,789,153,835,495,184,491,564,171,500,818,97,160,166,522,688,699,373,497,797,263,897,548,57,343,628,858,580,669,735,464,763,525,617,598,20,153,441,585,324,941,403,421},
        {453,569,296,142,620,669,639,417,933,888,318,342,231,946,552,163,968,287,627,731,812,596,682,833,750,475,770,426,417,173,848,222,94,144,364,715,165,356,484,450,596,802,792,828,101,344,343,69,984,323,152,796,919,186,981,669,662,751,96,79,924,296,653,371,792,18,86,309,726,570,760,322,725,552,502,826,249,846,247,233,521,399,381,440,586,363,462,248,114,910,679,391,558,332,114,702,702,200,11,428},
        {122,771,751,847,676,605,25,925,803,272,510,324,672,891,117,258,254,579,858,721,489,537,464,399,221,578,101,924,130,112,704,252,884,455,100,560,413,477,837,216,750,347,541,422,238,658,32,845,589,242,566,430,779,382,829,352,960,930,276,90,42,981,694,278,788,146,838,553,624,27,770,374,374,663,148,613,673,532,458,262,774,376,692,905,758,521,257,70,803,886,512,845,219,206,124,359,353,314,913,329},
        {342,35,703,716,698,203,681,371,735,491,985,509,219,29,766,977,902,23,399,705,261,911,550,480,118,26,840,823,693,105,152,35,140,207,103,838,410,137,561,145,628,898,6,848,927,772,177,829,147,929,886,409,840,788,889,310,815,81,485,508,186,989,895,326,196,350,516,606,487,429,103,468,327,461,668,254,233,845,435,733,126,321,142,319,110,383,629,277,817,467,137,355,456,384,34,653,734,550,611,222},
        {980,67,690,307,528,358,914,114,555,349,847,682,23,341,1,485,76,982,114,893,449,251,601,258,987,635,911,721,185,874,943,517,941,985,825,822,343,91,288,251,440,487,285,815,828,286,300,256,620,414,502,422,17,103,680,4,738,943,78,923,169,21,793,463,359,970,285,54,61,925,305,853,412,590,669,592,228,969,848,201,736,350,623,105,453,655,462,543,950,540,467,119,913,612,582,272,582,219,327,643},
        {144,632,496,908,575,165,500,803,487,701,356,575,51,979,680,857,634,142,400,936,682,219,56,596,831,990,868,765,210,547,408,706,532,905,967,107,422,467,262,261,168,619,836,572,950,517,781,937,11,533,873,46,753,929,642,936,272,862,702,834,762,462,540,294,719,859,753,142,679,367,403,199,338,592,771,289,461,904,578,472,438,451,518,543,733,512,479,5,727,533,839,489,996,731,783,67,943,888,209,622},
        {255,965,821,594,909,593,235,370,849,165,194,287,616,65,830,701,577,662,58,304,547,249,145,895,333,928,963,276,168,524,898,424,489,719,370,750,664,957,120,514,122,667,153,90,732,336,792,309,998,850,966,897,452,111,793,785,392,108,61,560,632,311,336,474,382,706,224,399,15,697,913,137,364,418,228,96,754,372,757,104,574,75,2,26,539,147,163,931,255,224,843,887,887,180,713,270,238,938,669,254},
        {635,934,743,351,704,323,447,459,695,556,915,270,632,917,648,523,416,812,454,671,388,649,911,276,181,624,898,420,914,919,26,901,853,121,252,909,445,51,368,140,960,284,762,944,553,411,467,322,223,273,345,611,922,256,239,104,233,137,876,499,56,254,401,261,727,5,171,172,57,891,665,17,527,427,961,433,190,780,755,413,53,100,377,975,709,616,431,294,106,659,793,162,265,546,776,993,552,947,165,609},
        {190,830,978,718,610,291,151,800,71,258,566,476,358,943,451,419,911,235,713,17,246,507,532,512,405,308,505,957,255,22,918,797,205,896,515,815,539,18,967,962,276,533,438,987,828,242,406,740,477,120,109,75,979,641,587,384,949,444,694,556,467,612,354,672,861,869,839,400,888,158,715,516,44,153,503,872,395,910,964,224,382,74,300,361,715,239,97,665,684,791,573,151,756,927,175,617,149,366,369,389},
        {524,84,905,920,590,409,145,337,319,109,562,701,535,214,414,251,453,863,268,489,7,193,992,763,121,167,380,270,885,101,659,410,186,916,682,776,325,827,113,644,937,27,697,472,593,111,75,399,327,695,888,334,241,881,97,362,400,829,984,286,930,995,48,116,911,730,244,237,558,710,233,847,89,283,671,683,746,747,82,73,794,970,407,35,203,856,749,604,685,85,890,968,80,938,84,344,668,681,933,226},
        {743,518,73,832,801,97,515,548,844,949,621,990,272,381,378,475,237,479,79,275,565,969,243,997,259,679,341,928,360,626,506,455,145,932,288,946,29,155,494,225,105,468,567,377,849,297,852,86,777,284,713,342,605,956,339,865,636,33,145,348,659,3,804,804,287,92,103,668,599,597,245,704,65,813,81,266,462,286,705,239,922,418,581,527,375,273,744,363,658,241,711,317,597,867,474,884,311,577,905,911},
        {174,150,615,592,315,49,858,778,687,563,17,609,982,951,488,709,576,585,72,234,826,135,551,423,355,25,660,666,954,565,577,129,715,545,73,31,946,931,161,985,847,178,946,829,481,434,890,57,371,314,291,198,449,195,973,804,572,633,823,527,550,752,8,266,649,81,649,595,364,810,580,211,340,526,392,174,313,282,231,684,596,875,234,398,422,208,554,994,193,377,873,744,482,881,362,131,314,363,79,679},
        {525,659,242,217,538,635,391,203,269,975,887,866,202,474,616,624,34,170,970,579,900,844,323,734,77,37,865,392,400,944,423,925,956,665,143,494,300,886,697,570,861,936,788,63,410,756,687,796,278,10,376,530,854,51,264,283,89,130,675,489,426,98,767,382,116,262,228,416,148,277,338,10,214,478,73,976,234,113,773,513,123,501,43,329,552,308,612,641,790,640,483,216,90,250,951,206,512,179,975,660},
        {457,313,22,23,144,96,999,378,561,124,243,684,625,287,365,530,947,977,171,89,617,654,305,708,256,256,914,768,436,241,781,245,555,803,268,699,251,619,429,812,96,673,848,73,312,213,603,259,191,775,348,160,781,5,868,38,614,135,158,402,376,291,647,283,95,267,334,698,886,764,511,982,789,711,56,101,925,659,712,468,786,412,980,568,417,201,958,31,336,468,785,64,760,432,700,207,699,34,905,938},
        {150,768,920,939,480,328,392,757,988,104,577,774,516,557,694,286,758,4,669,446,473,455,863,233,239,563,440,291,949,345,229,100,466,149,391,946,478,784,55,818,240,632,944,757,189,991,395,300,995,64,746,468,871,609,53,111,524,493,402,474,191,983,926,9,484,317,955,314,453,362,132,694,994,429,451,535,420,198,187,767,614,286,588,486,895,641,949,420,487,703,246,30,686,172,39,170,841,346,485,295},
        {708,969,989,54,750,792,941,522,990,129,290,604,415,878,442,662,871,391,434,358,446,680,388,132,204,779,655,46,125,492,341,833,813,682,239,564,474,181,86,464,662,376,420,77,606,215,91,478,958,526,188,405,558,929,889,115,708,896,161,834,388,854,19,202,536,259,118,10,792,204,826,454,933,598,883,539,813,974,369,772,852,910,529,763,839,418,878,547,315,391,733,55,245,105,609,781,364,727,143,508},
        {932,321,314,217,919,197,108,733,523,478,857,728,388,386,491,579,156,721,126,471,112,212,879,709,317,488,490,33,216,985,541,500,306,855,69,225,404,177,310,279,7,167,7,747,905,850,326,62,571,805,885,35,17,764,744,334,605,586,719,173,571,260,673,877,467,742,455,223,271,765,502,279,285,510,26,542,712,705,956,636,510,842,671,879,958,416,565,915,354,284,88,926,896,113,803,715,207,610,938,479},
        {376,440,758,13,302,136,555,15,841,512,651,703,706,674,582,16,442,147,932,797,431,20,723,679,134,878,394,341,489,332,820,217,125,930,230,427,419,137,794,612,649,797,668,707,472,250,724,914,750,656,711,533,28,786,213,162,665,607,856,506,292,28,723,417,311,305,196,730,794,991,694,796,788,362,503,612,965,227,527,715,235,590,248,264,377,813,778,394,773,634,252,417,15,327,834,326,632,382,56,778},
        {725,102,574,866,817,78,478,782,657,357,849,245,948,449,861,677,263,639,423,388,626,675,805,641,2,639,967,986,373,375,116,99,829,691,965,646,769,443,428,778,153,629,23,453,79,884,130,342,876,905,730,502,932,535,495,286,526,814,624,899,189,740,350,370,431,315,17,200,111,797,979,264,427,354,717,506,239,199,200,115,456,930,969,388,817,464,674,695,278,298,946,819,38,297,189,470,612,206,22,75},
        {356,353,691,783,708,760,289,299,311,489,414,767,771,383,507,940,847,181,635,477,831,581,296,222,878,485,44,843,44,418,918,400,772,610,183,832,722,824,131,34,665,897,801,788,280,309,728,479,842,363,956,26,944,604,248,175,441,644,18,485,62,288,885,186,250,420,370,973,596,501,7,261,750,160,49,382,821,777,861,664,492,169,42,789,125,642,964,567,286,334,52,700,622,290,887,873,62,257,198,659},
        {111,557,272,213,717,674,596,539,803,809,555,296,979,597,85,104,239,401,23,877,735,76,577,357,718,816,582,780,74,132,791,537,689,64,750,407,90,346,298,893,156,853,189,487,802,626,943,393,27,967,270,114,395,847,824,113,664,758,245,90,891,37,979,580,453,729,339,543,428,637,788,936,842,330,423,644,956,718,37,336,37,659,802,432,859,626,897,875,385,143,965,276,532,944,208,337,25,548,232,805},
        {537,20,741,380,702,516,376,659,235,766,347,272,425,149,57,284,776,954,159,513,449,476,789,333,772,997,670,150,897,254,955,435,627,697,167,329,213,543,340,448,661,39,73,87,189,130,723,317,436,235,830,886,63,971,219,836,320,242,338,218,496,293,5,123,990,172,805,556,67,145,4,729,185,429,168,726,911,243,395,348,830,225,234,894,548,805,82,868,47,420,86,896,713,91,371,56,615,176,612,683},
        {674,968,764,859,398,932,937,309,175,332,9,358,909,595,252,457,401,686,325,800,458,764,48,171,207,420,579,175,948,191,858,974,160,622,185,910,906,122,571,433,454,933,791,715,528,395,172,281,81,850,82,539,966,482,63,525,902,642,700,203,186,558,177,698,532,363,608,438,837,531,872,292,464,15,359,345,411,532,626,492,734,60,384,52,543,447,577,797,441,278,0,627,188,530,325,721,245,285,511,82},
        {169,735,726,985,751,86,330,162,970,957,654,56,17,390,108,560,837,685,710,631,315,710,258,504,592,936,577,837,573,88,272,742,824,350,728,575,436,410,737,758,367,743,814,737,134,922,649,323,960,359,954,275,422,565,779,14,501,356,204,74,797,828,169,621,178,249,548,615,659,637,725,379,732,540,468,218,814,117,542,774,829,848,50,251,765,829,617,266,538,173,693,335,1,214,308,180,463,856,147,474},
        {845,224,853,577,764,321,796,931,791,338,705,620,538,755,223,304,937,192,922,827,366,967,514,367,181,822,899,996,30,398,471,875,623,676,452,739,350,248,670,141,938,376,113,477,483,688,133,772,880,55,951,246,375,465,966,556,287,217,905,669,616,728,544,591,404,997,330,106,597,1,247,536,729,712,365,564,400,498,689,281,905,640,879,280,458,197,189,97,415,94,767,383,174,311,974,578,660,656,685,258},
      };
//Answer:
      int32 answ =  98373;
      uint8 xy[] = {49,37,94,36,73,58,0,79,29,66,11,85,25,88,96,70,63,9,98,92,52,40,16,55,76,59,99,38,78,46,62,19,69,24,17,53,35,67,74,42,51,56,60,90,26,41,61,7,72,4,93,30,14,21,31,6,13,86,33,18,89,32,48,97,28,95,44,45,71,87,80,81,68,91,5,20,54,57,10,77,34,50,83,43,22,23,39,75,82,8,2,84,47,27,15,12,64,1,3,65};
      uint8 lx[] = {61,69,57,64,57,54,66,22,58,51,34,53,44,41,74,26,34,63,55,51,60,65,46,60,68,67,55,50,57,63,24,75,65,69,29,39,58,33,41,47,72,70,63,47,44,61,56,0,78,44,42,26,67,73,42,21,57,27,55,65,54,78,44,67,40,51,51,59,54,77,74,71,64,81,43,52,51,50,73,49,47,45,47,32,34,35,68,56,64,39,47,65,58,70,55,50,20,56,65,41};
      uint16 ly[] = {955,924,941,934,918,933,924,942,936,934,942,949,930,915,950,925,932,923,921,939,930,922,953,932,926,917,956,932,924,919,950,924,910,929,922,916,952,908,941,929,933,923,930,941,919,928,921,977,933,922,910,972,924,919,917,916,957,926,928,926,943,926,914,933,932,917,924,937,916,939,925,935,945,930,932,916,939,903,951,919,938,924,943,940,946,937,938,924,933,930,932,924,914,936,914,935,950,899,921,946};

      uint8 assignment1[M], assignment2[N];
      int32 votes = linear_assignment(scores, M, M, assignment1, assignment2);
      TS_ASSERT_EQUALS(votes, answ);
      TS_ASSERT_SAME_DATA(assignment1, xy, M*sizeof(*xy));
    }
    void test10x3_4x1() {
      int16 scores[10][3];
      scores[0][0] = 77;
      scores[1][0] = 0;
      scores[2][0] = 0;
      scores[3][0] = 0;
      int8 assignment[3];
      int8 reverse[10];
      int16 score = linear_assignment(scores, 4, 1, reverse, assignment);
      TS_ASSERT_EQUALS(score, 77);
    }
  };
}

#endif // __TestAssignment_h

